export interface Envelope {
  id: string
  name: string
  allocation: number // Total amount allocated for the period (M)
  spent: number // Amount already spent (C)
  periodLength: number // Length of period in days (L)
  startDate: Date // Start date of the period
  color: string // Status color
  previousRemaining?: number // Amount remaining from previous period
}

export interface Bill {
  id: string
  name: string
  amount: number
  dueDay: number // Day of month when bill is due (1-31)
  isRecurring: boolean
  category?: string // e.g., "utilities", "rent", "insurance"
  isAutoPay?: boolean
  lastPaidDate?: Date
}

export interface BillsEnvelope {
  id: string
  name: "Bills" // Always "Bills"
  totalMonthlyBills: number // Sum of all monthly bills
  cushionAmount: number // Extra amount to maintain as buffer
  targetAmount: number // Total monthly bills + cushion
  currentBalance: number // Current amount in the envelope
  bills: Bill[]
  nextDueDate: Date // Next bill due date
  nextDueAmount: number // Amount of next bill due
  isFullyFunded: boolean // Whether envelope has enough for all bills this month
  hasReachedCushion: boolean // Whether envelope has reached the cushioned target
  requiredPerPaycheck: number // How much user needs to contribute per paycheck
}

export interface Purchase {
  id: string
  amount: number
  item?: string // Optional SKU/item name
  envelopeId: string
  date: Date
}

export interface ShuffleTransaction {
  id: string
  date: Date
  targetEnvelopeId: string
  purchaseId: string
  allocations: ShuffleAllocation[]
}

export interface ShuffleAllocation {
  envelopeId: string
  amount: number
}

export interface Period {
  id: string
  startDate: Date
  endDate: Date
  envelopes: Envelope[]
  billsEnvelope?: BillsEnvelope
  transactions: (Purchase | ShuffleTransaction)[]
  isAutoGenerated?: boolean
  isSyncPeriod?: boolean
}

export interface UserPreferences {
  periodLength: number
  firstPeriodStart: Date
  firstPeriodLength: number
  nextPayday: Date
  paycheckAmount: number
  paycheckFrequency: string
  autoCreatePeriods: boolean
  monthlyPayDay?: number // For monthly pay schedules
  semiMonthlyPayDays?: [number, number] // For semi-monthly pay schedules
}

export type StatusType = "super-safe" | "safe" | "off-track" | "danger" | "budget-breaker" | "envelope-empty"

export interface StatusResult {
  status: StatusType
  currentDay: number
  periodLength: number
  currentSpend: number
  expectedSpend: number
  dailyAmount: number
  remainingAmount: number
  purchase: Purchase | null
  daysWorthOfSpending: number
  daysWorthAfterPurchase: number
  envelopeName: string
  statusColor: string
  statusBorderColor: string
  statusTextColor: string
  statusText: string
  statusIcon: string
  isCurrentlyEmpty: boolean
}

export interface EnvelopeStatus {
  status: StatusType
  color: string
  textColor: string
  borderColor: string
  icon: string
  text: string
}

export type ShuffleStrategy = "manual" | "reduce-from-all" | "recommended"

export interface ShuffleLimit {
  envelopeId: string
  maxAmount: number
  currentShuffled: number
}
